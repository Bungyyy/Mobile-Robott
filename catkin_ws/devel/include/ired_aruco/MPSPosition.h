// Generated by gencpp from file ired_aruco/MPSPosition.msg
// DO NOT EDIT!


#ifndef IRED_ARUCO_MESSAGE_MPSPOSITION_H
#define IRED_ARUCO_MESSAGE_MPSPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ired_aruco
{
template <class ContainerAllocator>
struct MPSPosition_
{
  typedef MPSPosition_<ContainerAllocator> Type;

  MPSPosition_()
    : number_found(0)
    , id()
    , x()
    , y()
    , theta()  {
    }
  MPSPosition_(const ContainerAllocator& _alloc)
    : number_found(0)
    , id(_alloc)
    , x(_alloc)
    , y(_alloc)
    , theta(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _number_found_type;
  _number_found_type number_found;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _id_type;
  _id_type id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::ired_aruco::MPSPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ired_aruco::MPSPosition_<ContainerAllocator> const> ConstPtr;

}; // struct MPSPosition_

typedef ::ired_aruco::MPSPosition_<std::allocator<void> > MPSPosition;

typedef boost::shared_ptr< ::ired_aruco::MPSPosition > MPSPositionPtr;
typedef boost::shared_ptr< ::ired_aruco::MPSPosition const> MPSPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ired_aruco::MPSPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ired_aruco::MPSPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ired_aruco::MPSPosition_<ContainerAllocator1> & lhs, const ::ired_aruco::MPSPosition_<ContainerAllocator2> & rhs)
{
  return lhs.number_found == rhs.number_found &&
    lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ired_aruco::MPSPosition_<ContainerAllocator1> & lhs, const ::ired_aruco::MPSPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ired_aruco

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ired_aruco::MPSPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ired_aruco::MPSPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ired_aruco::MPSPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ired_aruco::MPSPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ired_aruco::MPSPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ired_aruco::MPSPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ired_aruco::MPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "769b8cad66706e9d423d19e4152250be";
  }

  static const char* value(const ::ired_aruco::MPSPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x769b8cad66706e9dULL;
  static const uint64_t static_value2 = 0x423d19e4152250beULL;
};

template<class ContainerAllocator>
struct DataType< ::ired_aruco::MPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ired_aruco/MPSPosition";
  }

  static const char* value(const ::ired_aruco::MPSPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ired_aruco::MPSPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 number_found\n"
"string[] id\n"
"float64[] x\n"
"float64[] y\n"
"float64[] theta\n"
;
  }

  static const char* value(const ::ired_aruco::MPSPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ired_aruco::MPSPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_found);
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MPSPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ired_aruco::MPSPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ired_aruco::MPSPosition_<ContainerAllocator>& v)
  {
    s << indent << "number_found: ";
    Printer<int16_t>::stream(s, indent + "  ", v.number_found);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.theta[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IRED_ARUCO_MESSAGE_MPSPOSITION_H
